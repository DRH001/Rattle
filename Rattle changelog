
Rattle has now officially been released! Rattle is now an imperative language - it's now actually useful for normal programming!
1.7.3:
  - Change < and > operators to return 1 or 0 for comparisons instead of true or false respectively
1.7.2:
  - data tape set to 100 slots by default, but expands automatically if more slots are needed. 
    -Note < still goes to the last slot when the pointer is 0, but > does not go to 0 from the last slot - it expands the data tape instead.
1.7.1:
  - data tape expanded to 10000 slots.
1.7.0:
  - < and > operators now compare the top of the stack to an argument, resulting in True or False. Note you can do *1 to turn True or False into 1 or 0 respectively.

1.6.2:
  -Use l? to create an empty list when the top of the stack is not already a list (otherwise deletes the last element in the list) 
1.6.1:
  -Loop structure fixes (especially inside functions)
  -Fixing functionality of second argument. Use r` to assign the second arg to the top of the stack and \ to use it

Version 1.6.*: 
  -Local functions! These are similar to functions but they do not affect main memory. Local functions are called using "F", and global functions are called using "f"
      See documentation for "F" for more details.
      Local functions are similar to the current functions (AKA global functions), but local functions are appended to the very end of code and use the separator : (where global functions use ;)
          Note: Local functions MUST be declared after global functions.
      Local functions have their own memory and are currently only passed the top of the stack, and return the top of the stack from the local function. Any memory used in a local function is discarded when the function returns.
      An example of how to use local functions:
          1|sF0g:p+sp[F1]4pgp:[+]3d1
          ...which outputs
              1
              2
              d1 has been executed
              d1 has been executed
              d1 has been executed
              d1 has been executed
              14
              2
              1
          Explanation:
           
              Main:
              1|               pass 1 as input
                s              save 1 to main memory slot 0
                 F0            call local function 0
                   g           get data from slot 0 (=1), print implicitly after code executes
                   
              Local function 0:               
              p                print top of stack (1)
               +               increment top of stack (to 2)
                s              save top of stack to local function 0's memory slot 0
                 p             print top of stack (2)
                  [  ]4        loop 4 times
                   F1          call local function 1
                       p       print top of stack
                        g      get value from local function 0's memory slot 0 (=2)
                         p     print top of stack (2)
              
              Local function 1:
              [ ]3             loop 3 times
               +               increment top of stack
                  d1           debug helper - prints "d1 has been executed". This prints 4 times because local function 0 calls local function 1 four times.
          
  
  -Major internal overhaul - global variables are not used anymore. Instead, any "global" variables are now in a variables class. This makes future development easier and will allow for Rattle virtual machines.
  -Better list handling using "l" (see documentation for "l")
  -Randomness (using `=?` - see documentation for "=")
  -Better array handling (arithmetic operations using scalars perform an element-wise operation on the top of the stack -> topOfStack = [4,2], *3 = [12,6]) 
      Note that arrays in Rattle use round brackets. Example: `=(1,2,3)` sets the top of the stack to [1,2,3]
  -Removing support for some default operators which were intended for code golfing (such as *0 multiplying by 10 instead of 0)
  -Miscellaneous fixes (such as allowing whitespace in functions and string args, fixed string parsing to not include end quotation mark, allowing empty output)
  -Version 1.6.* should be backwards compatible with all previous Rattle code

Version 1.5.*: better arguments. Now, round brackets "(", ")" can be used to pass more complex arguments to functions. Example: `=(2*4/3)` will set the top of the stack to 2.66...
                  Note that special characters can be used in the round-bracket arguments - you can use ~,`,@, etc.

Version 1.4.*: added exponentiate, loop iterators, better support for negatives, changed pointedValueInStorageEquals to "v", strings can be used as args for many functions, bugfixes

Version 1.3.*: Much better error handling and debug info

Version 1.2.*: List and array functions have been improved (see documentation). Improved utility for ASCII codes.

Version 1.1.1-1.1.5: small bug fixes and optimizations

In version 1.1.0, loops work slightly differently (they now work more like how loops work in normal languages - see the changelog for more details)
